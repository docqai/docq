[tool.poetry]
name = "docq"
version = "0.4.4"
description = "Docq.AI - private and secure knowledge insight on your data."
authors = ["Docq.AI Team <support@docqai.com>"]
maintainers = ["Docq.AI Team <support@docqai.com>"]
license = "AGPL-3.0-or-later"
homepage = "https://docq.ai"
repository = "https://github.com/docqai/docq"
documentation = "https://docqai.github.io/docq"
readme = "README.md"
packages = [{ include = "docq", from = "source" }]

[tool.poetry.dependencies]
python = "^3.10"
streamlit = "^1.24.0"
st-pages = "^0.4.1"
pypdf = "^3.9.0"
docx2txt = "^0.8"
argon2-cffi = "^21.3.0"
azure-core = "^1.27.1"
opendal = "^0.38.1"
llama-index = "0.8.34"
transformers = "^4.33.2"
optimum = { extras = ["exporters"], version = "^1.13.2" }
cryptography = "^41.0.3"
span-marker = "^1.3.0"
ruff = "^0.1.1"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.18.1"
black = { version = "^22.3.0", allow-prereleases = true }
xdoctest = "^1.0.0"
poethepoet = "^0.16.4"
pytest = "7.3.1"
pytest-html = "^3.1.1"
pytest-sugar = "^0.9.6"
pytest-reverse = "^1.5.0"
pytest-cov = "^3.0.0"
pytest-bdd = "^6.1.1"
mkdocs = "^1.4.2"
mkdocs-material = "^8.5.10"
mkdocs-gen-files = "^0.4.0"
mkdocs-awesome-pages-plugin = "^2.8.0"
mkapi = "^1.0.14"
pillow = "^9.5.0"
cairosvg = "^2.7.0"
python-dotenv = "^1.0.0"

[tool.poetry.scripts]
-c = "poethepoet:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
check = true


[tool.ruff]
ignore = ["E501"]
line-length = 120
select = [
    "C9",
    "E",
    "F",
    "W",
    "D",
    "G",
    "A",
    "PT",
    "S",
    "B",
    "ANN",
    "SIM",
    "I",
    "N",
]


[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
--verbose \
--maxfail=1 \
--reverse \
--color=yes \
--cov=docq \
--html=docs/pytest_report.html \
--self-contained-html \
--cov-fail-under=9 \
--cov-report term-missing \
--cov-report html:docs/cov-report \
--doctest-modules \
--cov-config=pyproject.toml"""
testpaths = ["tests"]
python_files = ["*_test.py"]
python_functions = ["test_*"]
render_collapsed = true
bdd_features_base_dir = "features"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.poe.tasks]
install = "poetry install --only main"
install-dev = "poetry install"
test = "pytest tests/unit"
test-integration = "pytest tests/integration"
pre-commit = "pre-commit run --all-files"
lint-ruff = "ruff check **/*.py --fix"
lint-black = "black **/*.py"
lint = ["lint-black", "lint-ruff"]
doc = "mkdocs serve --use-directory-urls --livereload --watch-theme --watch mkdocs.yaml"
doc-html = "mkdocs build --site-dir ./_site"

[tool.poe.tasks.run]
cmd = "streamlit run web/index.py --server.port $port --browser.gatherUsageStats false"
args = [{ name = "port", default = 8501, type = "integer" }]
env = { WATCHDOG_LOG_LEVEL = "ERROR", PYTHONPATH = "${POE_PWD}/web/:${POE_PWD}/source/" }

[tool.poe.tasks.docker-build]
cmd = """
docker build 
--build-arg TESTBUILD=$test \
--build-arg BUILDTAG=$build_tag \
--build-arg BUILDPLATFORM=$build_platform \
--target $target \
-t docq:$target-$build_tag ."""
help = "Build a docker image to test the project in an isolated environment"
args = [
    { name = "test", default = false, type = "boolean" },
    { name = "build-tag", default = "3.11-slim-buster" },
    { name = "build-platform", default = "linux/amd64" },
    { name = "target", default = "prod" },
]

[tool.poe.tasks.docker-build-pipcached]
cmd = """
docker build 
--build-arg TESTBUILD=$test \
--build-arg BUILDTAG=$build_tag \
--build-arg BUILDPLATFORM=$build_platform \
--build-arg PIPNOCACHE= \
--target $target \
-t docq:$target-$build_tag ."""
help = "Build a docker image to test the project in an isolated environment"
args = [
    { name = "test", default = false, type = "boolean" },
    { name = "build-tag", default = "3.11-slim-buster" },
    { name = "build-platform", default = "linux/amd64" },
    { name = "target", default = "prod" },
]

[tool.poe.tasks.docker-run]
cmd = """
docker run \
-it
--rm \
--name docq \
--env-file docker.env \
-p $port:$port \
docq:$target-$build_tag """
help = "Run the docker image"
args = [
    { name = "build-tag", default = "3.11-slim-buster" },
    { name = "target", default = "prod" },
    { name = "port", default = 8501, type = "integer" },
]

[tool.poe.tasks.docker-run-infisical]
cmd = """
docker run \
-it
--rm \
--name docq \
--env INFISICAL_TOKEN=$INFISICAL_TOKEN \
--env INFISICAL_ENV_NAME=stage
-p $port:$port \
docq:$target-$build_tag """
help = "Run the docker image"
args = [
    { name = "build-tag", default = "3.11-slim-buster" },
    { name = "target", default = "prod" },
    { name = "port", default = 8501, type = "integer" },
]
